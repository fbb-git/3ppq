#include "formhandler.h"

//#include <sstream>
#include <string>

#include <bobcat/log>

//#include "../../library/types/types.h"
//#include "../../library/tools/tools.h"

#include "../display/display.h"

using namespace std;
using namespace FBB;

extern Log g_log;

// struct FormHandler::MonitorIO        
// {
//     template <typename Type>
//     friend MonitorIO &&operator<<(MonitorIO &&tmp, Type const &value);
// 
//     FormHandler &d_rtForm;
// 
//     public:
//         MonitorIO(FormHandler &rtForm);
//         ~MonitorIO();
// };
// 
// inline FormHandler::MonitorIO::MonitorIO(FormHandler &rtForm)
// :
//     d_rtForm(rtForm)
// {
//     d_rtForm.d_reply.clear();
// }
// 
// template <typename Type>
// FormHandler::MonitorIO &&operator<<(FormHandler::MonitorIO &&tmp, 
//                                       Type const &value)
// {
//     std::ostringstream out;
//     out << value;
//     tmp.d_rtForm.d_reply += out.str();
//     return std::move(tmp);
// }
// 
// inline FormHandler::MonitorIO FormHandler::monitorSubmit()
// {
//     return MonitorIO{*this};
// }
